import{_ as o,C as n,c as l,o as t,a as s,q as d,b as p,m as r}from"./chunks/framework.BSdOUgs7.js";const f=JSON.parse('{"title":"运行模式","description":"","frontmatter":{},"headers":[{"level":2,"title":"基础介绍","slug":"mode-introduction","link":"#mode-introduction","children":[]},{"level":2,"title":"设置模式","slug":"mode-set-mode","link":"#mode-set-mode","children":[]},{"level":2,"title":"获取模式","slug":"mode-get-mode","link":"#mode-get-mode","children":[]}],"relativePath":"guide/mode.md","filePath":"guide/mode.md"}'),c={name:"guide/mode.md"};function i(m,e,u,b,g,h){const a=n("TextAd");return t(),l("div",null,[e[0]||(e[0]=s("h1",{id:"mode",tabindex:"-1"},[r("运行模式 "),s("a",{class:"header-anchor",href:"#mode","aria-label":'Permalink to "运行模式 {#mode}"'},"​")],-1)),d(a),e[1]||(e[1]=p(`<h2 id="mode-introduction" tabindex="-1">基础介绍 <a class="header-anchor" href="#mode-introduction" aria-label="Permalink to &quot;基础介绍 {#mode-introduction}&quot;">​</a></h2><p>运行模式在现有绝大多数成熟框架中都会有设计，主要作用是为了通过程序外部参数来改变程序内部预先定义好的行为。在<a href="https://github.com/dobyte/due" target="_blank" rel="noreferrer">due</a>框架中也设计了debug、test、release三种运行模式。开发者可以根据自身需要来进行合理使用。</p><h2 id="mode-set-mode" tabindex="-1">设置模式 <a class="header-anchor" href="#mode-set-mode" aria-label="Permalink to &quot;设置模式 {#mode-set-mode}&quot;">​</a></h2><p>你可以通过以下方式来设置运行模式：</p><ol><li>通过配置文件指定 etc.mode=debug</li><li>通过环境变量指定 DUE_MODE=debug</li><li>通过启动参数指定 --mode=debug</li><li>通过调用mode.SetMode()函数指定</li></ol><p>设置优先级：配置文件 &lt; 环境变量 &lt; 运行参数 &lt; mode.SetMode()</p><h2 id="mode-get-mode" tabindex="-1">获取模式 <a class="header-anchor" href="#mode-get-mode" aria-label="Permalink to &quot;获取模式 {#mode-get-mode}&quot;">​</a></h2><p>你可以通过以下方式来获取当前程序的运行模式：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">github.com/dobyte/due/v2/mode</span></span></code></pre></div><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// GetMode 获取运行模式</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> GetMode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// IsDebugMode 是否Debug模式</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> IsDebugMode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// IsTestMode 是否Test模式</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> IsTestMode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// IsReleaseMode 是否Release模式</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> IsReleaseMode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">bool</span></span></code></pre></div>`,10))])}const E=o(c,[["render",i]]);export{f as __pageData,E as default};
