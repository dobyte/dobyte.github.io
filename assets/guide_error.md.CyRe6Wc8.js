import{_ as o,C as l,c as p,o as e,a as n,q as r,b as c,m as t}from"./chunks/framework.B2ptOLFE.js";const b=JSON.parse('{"title":"错误处理","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本介绍","slug":"error-introduction","link":"#error-introduction","children":[]},{"level":2,"title":"错误接口","slug":"error-define","link":"#error-define","children":[]},{"level":2,"title":"示例代码","slug":"errors-example","link":"#errors-example","children":[]}],"relativePath":"guide/error.md","filePath":"guide/error.md"}'),y={name:"guide/error.md"};function i(E,s,d,F,u,B){const a=l("TextAd");return e(),p("div",null,[s[0]||(s[0]=n("h1",{id:"error",tabindex:"-1"},[t("错误处理 "),n("a",{class:"header-anchor",href:"#error","aria-label":'Permalink to "错误处理 {#error}"'},"​")],-1)),r(a),s[1]||(s[1]=c(`<h2 id="error-introduction" tabindex="-1">基本介绍 <a class="header-anchor" href="#error-introduction" aria-label="Permalink to &quot;基本介绍 {#error-introduction}&quot;">​</a></h2><p>标准库的error相对比较简单，无法对错误的状态信息进行传递。为此，框架层专门设计了一套错误处理机制，通过errors.NewError()和codes.Convert()可以实现错误在集群服务间随意转换。</p><h2 id="error-define" tabindex="-1">错误接口 <a class="header-anchor" href="#error-define" aria-label="Permalink to &quot;错误接口 {#error-define}&quot;">​</a></h2><p>为了避免标准库errors与框架库errors上的名字冲突，方便开发者使用。框架库errors也重载了标准库errors的所有函数。因此，无论你是想创建普通的error还是框架设计的error，你都可以使用框架库的errors。</p><p>框架错误库重载函数</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">github.com/dobyte/due/v2/errors</span></span></code></pre></div><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// New Wrapping for errors.New standard library</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> New</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">text</span><span style="color:#F97583;"> string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Is Wrapping for errors.Is standard library</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> Is</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">target</span><span style="color:#F97583;"> error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// As Wrapping for errors.As standard library</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> As</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;"> error</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">target</span><span style="color:#B392F0;"> any</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Unwrap Wrapping for errors.Unwrap standard library</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> Unwrap</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;"> error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span></span></code></pre></div><p>框架错误库扩展函数</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">github.com/dobyte/due/v2/errors</span></span></code></pre></div><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// NewError 新建一个错误</span></span>
<span class="line"><span style="color:#6A737D;">// 可传入一下参数：</span></span>
<span class="line"><span style="color:#6A737D;">// text : 文本字符串</span></span>
<span class="line"><span style="color:#6A737D;">// code : 错误码</span></span>
<span class="line"><span style="color:#6A737D;">// error: 原生错误</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> NewError</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;"> ...interface</span><span style="color:#E1E4E8;">{}) </span><span style="color:#F97583;">*</span><span style="color:#B392F0;">Error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// NewErrorWithStack 新建一个带堆栈的错误</span></span>
<span class="line"><span style="color:#6A737D;">// 可传入一下参数：</span></span>
<span class="line"><span style="color:#6A737D;">// text : 文本字符串</span></span>
<span class="line"><span style="color:#6A737D;">// code : 错误码</span></span>
<span class="line"><span style="color:#6A737D;">// error: 原生错误</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> NewErrorWithStack</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;"> ...interface</span><span style="color:#E1E4E8;">{}) </span><span style="color:#F97583;">*</span><span style="color:#B392F0;">Error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Code 返回错误码</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> Code</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;"> error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#B392F0;">codes</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Code</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Next 返回下一个错误</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> Next</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;"> error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Cause 返回根因错误</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> Cause</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;"> error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Stack 返回堆栈</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> Stack</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;"> error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#B392F0;">stack</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Stack</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Replace 替换文本</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> Replace</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;"> error</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">text</span><span style="color:#F97583;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">condition</span><span style="color:#F97583;"> ...</span><span style="color:#B392F0;">codes</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Code</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span></span></code></pre></div><p>框架错误码库函数</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">github.com/dobyte/due/v2/codes</span></span></code></pre></div><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// NewCode 新建一个错误码</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> NewCode</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">code</span><span style="color:#F97583;"> int</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">message</span><span style="color:#F97583;"> ...</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#B392F0;">Code</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Convert 将错误信息转换为错误码</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> Convert</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;"> error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#B392F0;">Code</span></span></code></pre></div><h2 id="errors-example" tabindex="-1">示例代码 <a class="header-anchor" href="#errors-example" aria-label="Permalink to &quot;示例代码 {#errors-example}&quot;">​</a></h2><p>创建一个附带错误码的错误</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> errors.</span><span style="color:#B392F0;">NewError</span><span style="color:#E1E4E8;">(codes.</span><span style="color:#B392F0;">NewCode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;not found&quot;</span><span style="color:#E1E4E8;">))</span></span></code></pre></div><p>将一个错误转换为错误码</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">code </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> codes.</span><span style="color:#B392F0;">Convert</span><span style="color:#E1E4E8;">(err)</span></span></code></pre></div><p>完整示例</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#9ECBFF;">	&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">	&quot;</span><span style="color:#B392F0;">github.com/dobyte/due/v2/codes</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">	&quot;</span><span style="color:#B392F0;">github.com/dobyte/due/v2/errors</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> errors.</span><span style="color:#B392F0;">NewError</span><span style="color:#E1E4E8;">(codes.</span><span style="color:#B392F0;">NewCode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;not found&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	code </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> codes.</span><span style="color:#B392F0;">Convert</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#B392F0;">Println</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#B392F0;">Println</span><span style="color:#E1E4E8;">(code.</span><span style="color:#B392F0;">Code</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#B392F0;">Println</span><span style="color:#E1E4E8;">(code.</span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>运行示例</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;"> go</span><span style="color:#9ECBFF;"> run</span><span style="color:#9ECBFF;"> main.go</span></span>
<span class="line"><span style="color:#B392F0;">code</span><span style="color:#9ECBFF;"> error:</span><span style="color:#9ECBFF;"> code</span><span style="color:#9ECBFF;"> =</span><span style="color:#79B8FF;"> 404</span><span style="color:#9ECBFF;"> desc</span><span style="color:#9ECBFF;"> =</span><span style="color:#9ECBFF;"> not</span><span style="color:#9ECBFF;"> found</span></span>
<span class="line"><span style="color:#B392F0;">404</span></span>
<span class="line"><span style="color:#B392F0;">not</span><span style="color:#9ECBFF;"> found</span></span></code></pre></div>`,22))])}const C=o(y,[["render",i]]);export{b as __pageData,C as default};
