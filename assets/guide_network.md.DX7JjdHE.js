import{_ as e,C as l,c as o,o as t,a as s,q as p,b as r,m as c}from"./chunks/framework.BSdOUgs7.js";const m=JSON.parse('{"title":"网络模块","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本介绍","slug":"network-introduction","link":"#network-introduction","children":[]},{"level":2,"title":"网络服务器示例","slug":"network-server-example","link":"#network-server-example","children":[]},{"level":2,"title":"自定义网络服务器","slug":"network-custom-server","link":"#network-custom-server","children":[]},{"level":2,"title":"网络客户端示例","slug":"network-client-example","link":"#network-client-example","children":[]},{"level":2,"title":"自定义网络客户端","slug":"network-custom-client","link":"#network-custom-client","children":[]}],"relativePath":"guide/network.md","filePath":"guide/network.md"}'),i={name:"guide/network.md"};function y(E,n,d,F,h,u){const a=l("TextAd");return t(),o("div",null,[n[0]||(n[0]=s("h1",{id:"network",tabindex:"-1"},[c("网络模块 "),s("a",{class:"header-anchor",href:"#network","aria-label":'Permalink to "网络模块 {#network}"'},"​")],-1)),p(a),n[1]||(n[1]=r(`<h2 id="network-introduction" tabindex="-1">基本介绍 <a class="header-anchor" href="#network-introduction" aria-label="Permalink to &quot;基本介绍 {#network-introduction}&quot;">​</a></h2><p>网络模块（network）作为网关服（gate）和测试客户端（client）的核心模块，主要负责为各种客户端提供连接和通信支持。目前框架已提供了 <a href="https://github.com/dobyte/due/tree/main/network/tcp" target="_blank" rel="noreferrer">TCP</a>、<a href="https://github.com/dobyte/due/tree/main/network/kcp" target="_blank" rel="noreferrer">KCP</a>、<a href="https://github.com/dobyte/due/tree/main/network/ws" target="_blank" rel="noreferrer">WS</a> 三种常用的网络层支持。你可以根据自生业务需要来选择合适的网络模块，也可以根据框架的网络层接口来实现自己的网络模块。</p><h2 id="network-server-example" tabindex="-1">网络服务器示例 <a class="header-anchor" href="#network-server-example" aria-label="Permalink to &quot;网络服务器示例 {#network-server-example}&quot;">​</a></h2><p>网络服务器主要作为网关服（gate）的网络模块而存在，这里就不再做相关示例的文档说明，如需了解如何使用可以移步<a href="/guide/gate.html#示例代码-gate-example">网关服务器</a></p><h2 id="network-custom-server" tabindex="-1">自定义网络服务器 <a class="header-anchor" href="#network-custom-server" aria-label="Permalink to &quot;自定义网络服务器 {#network-custom-server}&quot;">​</a></h2><p>如果你想在自己的业务中使用自定义的网络服务器，你可以通过实现以下接口来构建一个属于自己的网络服务器库，然后应用到自己的网关服（gate）上。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#B392F0;">	StartHandler</span><span style="color:#F97583;">      func</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">	CloseHandler</span><span style="color:#F97583;">      func</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">	ConnectHandler</span><span style="color:#F97583;">    func</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">conn</span><span style="color:#B392F0;"> Conn</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">	DisconnectHandler</span><span style="color:#F97583;"> func</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">conn</span><span style="color:#B392F0;"> Conn</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">	ReceiveHandler</span><span style="color:#F97583;">    func</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">conn</span><span style="color:#B392F0;"> Conn</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Server</span><span style="color:#F97583;"> interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">	// Addr 监听地址</span></span>
<span class="line"><span style="color:#B392F0;">	Addr</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#6A737D;">	// Start 启动服务器</span></span>
<span class="line"><span style="color:#B392F0;">	Start</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#6A737D;">	// Stop 关闭服务器</span></span>
<span class="line"><span style="color:#B392F0;">	Stop</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#6A737D;">	// Protocol 协议</span></span>
<span class="line"><span style="color:#B392F0;">	Protocol</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#6A737D;">	// OnStart 监听服务器启动</span></span>
<span class="line"><span style="color:#B392F0;">	OnStart</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">handler</span><span style="color:#B392F0;"> StartHandler</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">	// OnStop 监听服务器关闭</span></span>
<span class="line"><span style="color:#B392F0;">	OnStop</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">handler</span><span style="color:#B392F0;"> CloseHandler</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">	// OnConnect 监听连接打开</span></span>
<span class="line"><span style="color:#B392F0;">	OnConnect</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">handler</span><span style="color:#B392F0;"> ConnectHandler</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">	// OnReceive 监听接收消息</span></span>
<span class="line"><span style="color:#B392F0;">	OnReceive</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">handler</span><span style="color:#B392F0;"> ReceiveHandler</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">	// OnDisconnect 监听连接断开</span></span>
<span class="line"><span style="color:#B392F0;">	OnDisconnect</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">handler</span><span style="color:#B392F0;"> DisconnectHandler</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="network-client-example" tabindex="-1">网络客户端示例 <a class="header-anchor" href="#network-client-example" aria-label="Permalink to &quot;网络客户端示例 {#network-client-example}&quot;">​</a></h2><p>网络客户端主要作为测试客户端（client）的网络模块而存在，这里就不再做相关示例的文档说明，如需了解如何使用可以移步<a href="/guide/client.html#示例代码-client-example">测试客户端</a></p><h2 id="network-custom-client" tabindex="-1">自定义网络客户端 <a class="header-anchor" href="#network-custom-client" aria-label="Permalink to &quot;自定义网络客户端 {#network-custom-client}&quot;">​</a></h2><p>如果你想在自己的业务中使用自定义的网络客户端，你可以通过实现以下接口来构建一个属于自己的网络客户端库，然后应用到自己的测试客户端（client）上。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Client</span><span style="color:#F97583;"> interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">	// Dial 拨号连接</span></span>
<span class="line"><span style="color:#B392F0;">	Dial</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">addr</span><span style="color:#F97583;"> ...</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (</span><span style="color:#B392F0;">Conn</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">	// Protocol 协议</span></span>
<span class="line"><span style="color:#B392F0;">	Protocol</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#6A737D;">	// OnConnect 监听连接打开</span></span>
<span class="line"><span style="color:#B392F0;">	OnConnect</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">handler</span><span style="color:#B392F0;"> ConnectHandler</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">	// OnReceive 监听接收消息</span></span>
<span class="line"><span style="color:#B392F0;">	OnReceive</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">handler</span><span style="color:#B392F0;"> ReceiveHandler</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">	// OnDisconnect 监听连接断开</span></span>
<span class="line"><span style="color:#B392F0;">	OnDisconnect</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">handler</span><span style="color:#B392F0;"> DisconnectHandler</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>`,12))])}const B=e(i,[["render",y]]);export{m as __pageData,B as default};
